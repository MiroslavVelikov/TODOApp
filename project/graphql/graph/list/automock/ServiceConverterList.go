// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	model "project/graphql/graph/model"

	mock "github.com/stretchr/testify/mock"
)

// ServiceConverterList is an autogenerated mock type for the ServiceConverterList type
type ServiceConverterList struct {
	mock.Mock
}

type ServiceConverterList_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceConverterList) EXPECT() *ServiceConverterList_Expecter {
	return &ServiceConverterList_Expecter{mock: &_m.Mock}
}

// ConvertResponseToListOutput provides a mock function with given fields: response
func (_m *ServiceConverterList) ConvertResponseToListOutput(response []byte) (*model.ListOutput, error) {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for ConvertResponseToListOutput")
	}

	var r0 *model.ListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*model.ListOutput, error)); ok {
		return rf(response)
	}
	if rf, ok := ret.Get(0).(func([]byte) *model.ListOutput); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceConverterList_ConvertResponseToListOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertResponseToListOutput'
type ServiceConverterList_ConvertResponseToListOutput_Call struct {
	*mock.Call
}

// ConvertResponseToListOutput is a helper method to define mock.On call
//   - response []byte
func (_e *ServiceConverterList_Expecter) ConvertResponseToListOutput(response interface{}) *ServiceConverterList_ConvertResponseToListOutput_Call {
	return &ServiceConverterList_ConvertResponseToListOutput_Call{Call: _e.mock.On("ConvertResponseToListOutput", response)}
}

func (_c *ServiceConverterList_ConvertResponseToListOutput_Call) Run(run func(response []byte)) *ServiceConverterList_ConvertResponseToListOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToListOutput_Call) Return(_a0 *model.ListOutput, _a1 error) *ServiceConverterList_ConvertResponseToListOutput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToListOutput_Call) RunAndReturn(run func([]byte) (*model.ListOutput, error)) *ServiceConverterList_ConvertResponseToListOutput_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertResponseToListsOutputs provides a mock function with given fields: response
func (_m *ServiceConverterList) ConvertResponseToListsOutputs(response []byte) ([]*model.ListOutput, error) {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for ConvertResponseToListsOutputs")
	}

	var r0 []*model.ListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]*model.ListOutput, error)); ok {
		return rf(response)
	}
	if rf, ok := ret.Get(0).(func([]byte) []*model.ListOutput); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.ListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceConverterList_ConvertResponseToListsOutputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertResponseToListsOutputs'
type ServiceConverterList_ConvertResponseToListsOutputs_Call struct {
	*mock.Call
}

// ConvertResponseToListsOutputs is a helper method to define mock.On call
//   - response []byte
func (_e *ServiceConverterList_Expecter) ConvertResponseToListsOutputs(response interface{}) *ServiceConverterList_ConvertResponseToListsOutputs_Call {
	return &ServiceConverterList_ConvertResponseToListsOutputs_Call{Call: _e.mock.On("ConvertResponseToListsOutputs", response)}
}

func (_c *ServiceConverterList_ConvertResponseToListsOutputs_Call) Run(run func(response []byte)) *ServiceConverterList_ConvertResponseToListsOutputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToListsOutputs_Call) Return(_a0 []*model.ListOutput, _a1 error) *ServiceConverterList_ConvertResponseToListsOutputs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToListsOutputs_Call) RunAndReturn(run func([]byte) ([]*model.ListOutput, error)) *ServiceConverterList_ConvertResponseToListsOutputs_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertResponseToTodosOutputs provides a mock function with given fields: response
func (_m *ServiceConverterList) ConvertResponseToTodosOutputs(response []byte) ([]*model.TodoOutput, error) {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for ConvertResponseToTodosOutputs")
	}

	var r0 []*model.TodoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]*model.TodoOutput, error)); ok {
		return rf(response)
	}
	if rf, ok := ret.Get(0).(func([]byte) []*model.TodoOutput); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TodoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceConverterList_ConvertResponseToTodosOutputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertResponseToTodosOutputs'
type ServiceConverterList_ConvertResponseToTodosOutputs_Call struct {
	*mock.Call
}

// ConvertResponseToTodosOutputs is a helper method to define mock.On call
//   - response []byte
func (_e *ServiceConverterList_Expecter) ConvertResponseToTodosOutputs(response interface{}) *ServiceConverterList_ConvertResponseToTodosOutputs_Call {
	return &ServiceConverterList_ConvertResponseToTodosOutputs_Call{Call: _e.mock.On("ConvertResponseToTodosOutputs", response)}
}

func (_c *ServiceConverterList_ConvertResponseToTodosOutputs_Call) Run(run func(response []byte)) *ServiceConverterList_ConvertResponseToTodosOutputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToTodosOutputs_Call) Return(_a0 []*model.TodoOutput, _a1 error) *ServiceConverterList_ConvertResponseToTodosOutputs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToTodosOutputs_Call) RunAndReturn(run func([]byte) ([]*model.TodoOutput, error)) *ServiceConverterList_ConvertResponseToTodosOutputs_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertResponseToUserOutput provides a mock function with given fields: response
func (_m *ServiceConverterList) ConvertResponseToUserOutput(response []byte) (*model.UserOutput, error) {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for ConvertResponseToUserOutput")
	}

	var r0 *model.UserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*model.UserOutput, error)); ok {
		return rf(response)
	}
	if rf, ok := ret.Get(0).(func([]byte) *model.UserOutput); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.UserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceConverterList_ConvertResponseToUserOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertResponseToUserOutput'
type ServiceConverterList_ConvertResponseToUserOutput_Call struct {
	*mock.Call
}

// ConvertResponseToUserOutput is a helper method to define mock.On call
//   - response []byte
func (_e *ServiceConverterList_Expecter) ConvertResponseToUserOutput(response interface{}) *ServiceConverterList_ConvertResponseToUserOutput_Call {
	return &ServiceConverterList_ConvertResponseToUserOutput_Call{Call: _e.mock.On("ConvertResponseToUserOutput", response)}
}

func (_c *ServiceConverterList_ConvertResponseToUserOutput_Call) Run(run func(response []byte)) *ServiceConverterList_ConvertResponseToUserOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToUserOutput_Call) Return(_a0 *model.UserOutput, _a1 error) *ServiceConverterList_ConvertResponseToUserOutput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceConverterList_ConvertResponseToUserOutput_Call) RunAndReturn(run func([]byte) (*model.UserOutput, error)) *ServiceConverterList_ConvertResponseToUserOutput_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceConverterList creates a new instance of ServiceConverterList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceConverterList(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceConverterList {
	mock := &ServiceConverterList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
