// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	http "net/http"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ResolverList is an autogenerated mock type for the ResolverList type
type ResolverList struct {
	mock.Mock
}

type ResolverList_Expecter struct {
	mock *mock.Mock
}

func (_m *ResolverList) EXPECT() *ResolverList_Expecter {
	return &ResolverList_Expecter{mock: &_m.Mock}
}

// AddUserToList provides a mock function with given fields: w, req
func (_m *ResolverList) AddUserToList(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_AddUserToList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToList'
type ResolverList_AddUserToList_Call struct {
	*mock.Call
}

// AddUserToList is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) AddUserToList(w interface{}, req interface{}) *ResolverList_AddUserToList_Call {
	return &ResolverList_AddUserToList_Call{Call: _e.mock.On("AddUserToList", w, req)}
}

func (_c *ResolverList_AddUserToList_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_AddUserToList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_AddUserToList_Call) Return() *ResolverList_AddUserToList_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_AddUserToList_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_AddUserToList_Call {
	_c.Run(run)
	return _c
}

// CreateList provides a mock function with given fields: w, req
func (_m *ResolverList) CreateList(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type ResolverList_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) CreateList(w interface{}, req interface{}) *ResolverList_CreateList_Call {
	return &ResolverList_CreateList_Call{Call: _e.mock.On("CreateList", w, req)}
}

func (_c *ResolverList_CreateList_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_CreateList_Call) Return() *ResolverList_CreateList_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_CreateList_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_CreateList_Call {
	_c.Run(run)
	return _c
}

// DeleteList provides a mock function with given fields: w, req
func (_m *ResolverList) DeleteList(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type ResolverList_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) DeleteList(w interface{}, req interface{}) *ResolverList_DeleteList_Call {
	return &ResolverList_DeleteList_Call{Call: _e.mock.On("DeleteList", w, req)}
}

func (_c *ResolverList_DeleteList_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_DeleteList_Call) Return() *ResolverList_DeleteList_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_DeleteList_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_DeleteList_Call {
	_c.Run(run)
	return _c
}

// GetAllLists provides a mock function with given fields: w, req
func (_m *ResolverList) GetAllLists(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_GetAllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLists'
type ResolverList_GetAllLists_Call struct {
	*mock.Call
}

// GetAllLists is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) GetAllLists(w interface{}, req interface{}) *ResolverList_GetAllLists_Call {
	return &ResolverList_GetAllLists_Call{Call: _e.mock.On("GetAllLists", w, req)}
}

func (_c *ResolverList_GetAllLists_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_GetAllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_GetAllLists_Call) Return() *ResolverList_GetAllLists_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_GetAllLists_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_GetAllLists_Call {
	_c.Run(run)
	return _c
}

// GetListById provides a mock function with given fields: w, req
func (_m *ResolverList) GetListById(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_GetListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListById'
type ResolverList_GetListById_Call struct {
	*mock.Call
}

// GetListById is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) GetListById(w interface{}, req interface{}) *ResolverList_GetListById_Call {
	return &ResolverList_GetListById_Call{Call: _e.mock.On("GetListById", w, req)}
}

func (_c *ResolverList_GetListById_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_GetListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_GetListById_Call) Return() *ResolverList_GetListById_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_GetListById_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_GetListById_Call {
	_c.Run(run)
	return _c
}

// GetUserFromListById provides a mock function with given fields: w, req
func (_m *ResolverList) GetUserFromListById(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_GetUserFromListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromListById'
type ResolverList_GetUserFromListById_Call struct {
	*mock.Call
}

// GetUserFromListById is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) GetUserFromListById(w interface{}, req interface{}) *ResolverList_GetUserFromListById_Call {
	return &ResolverList_GetUserFromListById_Call{Call: _e.mock.On("GetUserFromListById", w, req)}
}

func (_c *ResolverList_GetUserFromListById_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_GetUserFromListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_GetUserFromListById_Call) Return() *ResolverList_GetUserFromListById_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_GetUserFromListById_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_GetUserFromListById_Call {
	_c.Run(run)
	return _c
}

// GetUsersFromListById provides a mock function with given fields: w, req
func (_m *ResolverList) GetUsersFromListById(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_GetUsersFromListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersFromListById'
type ResolverList_GetUsersFromListById_Call struct {
	*mock.Call
}

// GetUsersFromListById is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) GetUsersFromListById(w interface{}, req interface{}) *ResolverList_GetUsersFromListById_Call {
	return &ResolverList_GetUsersFromListById_Call{Call: _e.mock.On("GetUsersFromListById", w, req)}
}

func (_c *ResolverList_GetUsersFromListById_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_GetUsersFromListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_GetUsersFromListById_Call) Return() *ResolverList_GetUsersFromListById_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_GetUsersFromListById_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_GetUsersFromListById_Call {
	_c.Run(run)
	return _c
}

// IsOwnerUserOwnerToListById provides a mock function with given fields: ctx, listId, username
func (_m *ResolverList) IsOwnerUserOwnerToListById(ctx context.Context, listId uuid.UUID, username string) bool {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for IsOwnerUserOwnerToListById")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, listId, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ResolverList_IsOwnerUserOwnerToListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsOwnerUserOwnerToListById'
type ResolverList_IsOwnerUserOwnerToListById_Call struct {
	*mock.Call
}

// IsOwnerUserOwnerToListById is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *ResolverList_Expecter) IsOwnerUserOwnerToListById(ctx interface{}, listId interface{}, username interface{}) *ResolverList_IsOwnerUserOwnerToListById_Call {
	return &ResolverList_IsOwnerUserOwnerToListById_Call{Call: _e.mock.On("IsOwnerUserOwnerToListById", ctx, listId, username)}
}

func (_c *ResolverList_IsOwnerUserOwnerToListById_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *ResolverList_IsOwnerUserOwnerToListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ResolverList_IsOwnerUserOwnerToListById_Call) Return(_a0 bool) *ResolverList_IsOwnerUserOwnerToListById_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResolverList_IsOwnerUserOwnerToListById_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) bool) *ResolverList_IsOwnerUserOwnerToListById_Call {
	_c.Call.Return(run)
	return _c
}

// IsUserPartOfList provides a mock function with given fields: ctx, listId, username
func (_m *ResolverList) IsUserPartOfList(ctx context.Context, listId uuid.UUID, username string) bool {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for IsUserPartOfList")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, listId, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ResolverList_IsUserPartOfList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsUserPartOfList'
type ResolverList_IsUserPartOfList_Call struct {
	*mock.Call
}

// IsUserPartOfList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *ResolverList_Expecter) IsUserPartOfList(ctx interface{}, listId interface{}, username interface{}) *ResolverList_IsUserPartOfList_Call {
	return &ResolverList_IsUserPartOfList_Call{Call: _e.mock.On("IsUserPartOfList", ctx, listId, username)}
}

func (_c *ResolverList_IsUserPartOfList_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *ResolverList_IsUserPartOfList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ResolverList_IsUserPartOfList_Call) Return(_a0 bool) *ResolverList_IsUserPartOfList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResolverList_IsUserPartOfList_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) bool) *ResolverList_IsUserPartOfList_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromList provides a mock function with given fields: w, req
func (_m *ResolverList) RemoveUserFromList(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_RemoveUserFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromList'
type ResolverList_RemoveUserFromList_Call struct {
	*mock.Call
}

// RemoveUserFromList is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) RemoveUserFromList(w interface{}, req interface{}) *ResolverList_RemoveUserFromList_Call {
	return &ResolverList_RemoveUserFromList_Call{Call: _e.mock.On("RemoveUserFromList", w, req)}
}

func (_c *ResolverList_RemoveUserFromList_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_RemoveUserFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_RemoveUserFromList_Call) Return() *ResolverList_RemoveUserFromList_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_RemoveUserFromList_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_RemoveUserFromList_Call {
	_c.Run(run)
	return _c
}

// UpdateList provides a mock function with given fields: w, req
func (_m *ResolverList) UpdateList(w http.ResponseWriter, req *http.Request) {
	_m.Called(w, req)
}

// ResolverList_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type ResolverList_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - w http.ResponseWriter
//   - req *http.Request
func (_e *ResolverList_Expecter) UpdateList(w interface{}, req interface{}) *ResolverList_UpdateList_Call {
	return &ResolverList_UpdateList_Call{Call: _e.mock.On("UpdateList", w, req)}
}

func (_c *ResolverList_UpdateList_Call) Run(run func(w http.ResponseWriter, req *http.Request)) *ResolverList_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *ResolverList_UpdateList_Call) Return() *ResolverList_UpdateList_Call {
	_c.Call.Return()
	return _c
}

func (_c *ResolverList_UpdateList_Call) RunAndReturn(run func(http.ResponseWriter, *http.Request)) *ResolverList_UpdateList_Call {
	_c.Run(run)
	return _c
}

// NewResolverList creates a new instance of ResolverList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResolverList(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResolverList {
	mock := &ResolverList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
