// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	model "project/graphql/graph/model"

	mock "github.com/stretchr/testify/mock"
)

// ServiceConverterTodo is an autogenerated mock type for the ServiceConverterTodo type
type ServiceConverterTodo struct {
	mock.Mock
}

type ServiceConverterTodo_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceConverterTodo) EXPECT() *ServiceConverterTodo_Expecter {
	return &ServiceConverterTodo_Expecter{mock: &_m.Mock}
}

// ConvertResponseToTodoOutput provides a mock function with given fields: response
func (_m *ServiceConverterTodo) ConvertResponseToTodoOutput(response []byte) (*model.TodoOutput, error) {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for ConvertResponseToTodoOutput")
	}

	var r0 *model.TodoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*model.TodoOutput, error)); ok {
		return rf(response)
	}
	if rf, ok := ret.Get(0).(func([]byte) *model.TodoOutput); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.TodoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceConverterTodo_ConvertResponseToTodoOutput_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertResponseToTodoOutput'
type ServiceConverterTodo_ConvertResponseToTodoOutput_Call struct {
	*mock.Call
}

// ConvertResponseToTodoOutput is a helper method to define mock.On call
//   - response []byte
func (_e *ServiceConverterTodo_Expecter) ConvertResponseToTodoOutput(response interface{}) *ServiceConverterTodo_ConvertResponseToTodoOutput_Call {
	return &ServiceConverterTodo_ConvertResponseToTodoOutput_Call{Call: _e.mock.On("ConvertResponseToTodoOutput", response)}
}

func (_c *ServiceConverterTodo_ConvertResponseToTodoOutput_Call) Run(run func(response []byte)) *ServiceConverterTodo_ConvertResponseToTodoOutput_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ServiceConverterTodo_ConvertResponseToTodoOutput_Call) Return(_a0 *model.TodoOutput, _a1 error) *ServiceConverterTodo_ConvertResponseToTodoOutput_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceConverterTodo_ConvertResponseToTodoOutput_Call) RunAndReturn(run func([]byte) (*model.TodoOutput, error)) *ServiceConverterTodo_ConvertResponseToTodoOutput_Call {
	_c.Call.Return(run)
	return _c
}

// ConvertResponseToTodosOutputs provides a mock function with given fields: response
func (_m *ServiceConverterTodo) ConvertResponseToTodosOutputs(response []byte) ([]*model.TodoOutput, error) {
	ret := _m.Called(response)

	if len(ret) == 0 {
		panic("no return value specified for ConvertResponseToTodosOutputs")
	}

	var r0 []*model.TodoOutput
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) ([]*model.TodoOutput, error)); ok {
		return rf(response)
	}
	if rf, ok := ret.Get(0).(func([]byte) []*model.TodoOutput); ok {
		r0 = rf(response)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.TodoOutput)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(response)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceConverterTodo_ConvertResponseToTodosOutputs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertResponseToTodosOutputs'
type ServiceConverterTodo_ConvertResponseToTodosOutputs_Call struct {
	*mock.Call
}

// ConvertResponseToTodosOutputs is a helper method to define mock.On call
//   - response []byte
func (_e *ServiceConverterTodo_Expecter) ConvertResponseToTodosOutputs(response interface{}) *ServiceConverterTodo_ConvertResponseToTodosOutputs_Call {
	return &ServiceConverterTodo_ConvertResponseToTodosOutputs_Call{Call: _e.mock.On("ConvertResponseToTodosOutputs", response)}
}

func (_c *ServiceConverterTodo_ConvertResponseToTodosOutputs_Call) Run(run func(response []byte)) *ServiceConverterTodo_ConvertResponseToTodosOutputs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]byte))
	})
	return _c
}

func (_c *ServiceConverterTodo_ConvertResponseToTodosOutputs_Call) Return(_a0 []*model.TodoOutput, _a1 error) *ServiceConverterTodo_ConvertResponseToTodosOutputs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceConverterTodo_ConvertResponseToTodosOutputs_Call) RunAndReturn(run func([]byte) ([]*model.TodoOutput, error)) *ServiceConverterTodo_ConvertResponseToTodosOutputs_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceConverterTodo creates a new instance of ServiceConverterTodo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceConverterTodo(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceConverterTodo {
	mock := &ServiceConverterTodo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
