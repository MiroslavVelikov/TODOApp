// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// RequestSenderInterface is an autogenerated mock type for the RequestSenderInterface type
type RequestSenderInterface struct {
	mock.Mock
}

type RequestSenderInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *RequestSenderInterface) EXPECT() *RequestSenderInterface_Expecter {
	return &RequestSenderInterface_Expecter{mock: &_m.Mock}
}

// SendRequest provides a mock function with given fields: requestType, route, body, headerData, expectedStatus
func (_m *RequestSenderInterface) SendRequest(requestType string, route string, body interface{}, headerData map[string]string, expectedStatus int) ([]byte, error, int) {
	ret := _m.Called(requestType, route, body, headerData, expectedStatus)

	if len(ret) == 0 {
		panic("no return value specified for SendRequest")
	}

	var r0 []byte
	var r1 error
	var r2 int
	if rf, ok := ret.Get(0).(func(string, string, interface{}, map[string]string, int) ([]byte, error, int)); ok {
		return rf(requestType, route, body, headerData, expectedStatus)
	}
	if rf, ok := ret.Get(0).(func(string, string, interface{}, map[string]string, int) []byte); ok {
		r0 = rf(requestType, route, body, headerData, expectedStatus)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, interface{}, map[string]string, int) error); ok {
		r1 = rf(requestType, route, body, headerData, expectedStatus)
	} else {
		r1 = ret.Error(1)
	}

	if rf, ok := ret.Get(2).(func(string, string, interface{}, map[string]string, int) int); ok {
		r2 = rf(requestType, route, body, headerData, expectedStatus)
	} else {
		r2 = ret.Get(2).(int)
	}

	return r0, r1, r2
}

// RequestSenderInterface_SendRequest_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendRequest'
type RequestSenderInterface_SendRequest_Call struct {
	*mock.Call
}

// SendRequest is a helper method to define mock.On call
//   - requestType string
//   - route string
//   - body interface{}
//   - headerData map[string]string
//   - expectedStatus int
func (_e *RequestSenderInterface_Expecter) SendRequest(requestType interface{}, route interface{}, body interface{}, headerData interface{}, expectedStatus interface{}) *RequestSenderInterface_SendRequest_Call {
	return &RequestSenderInterface_SendRequest_Call{Call: _e.mock.On("SendRequest", requestType, route, body, headerData, expectedStatus)}
}

func (_c *RequestSenderInterface_SendRequest_Call) Run(run func(requestType string, route string, body interface{}, headerData map[string]string, expectedStatus int)) *RequestSenderInterface_SendRequest_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(interface{}), args[3].(map[string]string), args[4].(int))
	})
	return _c
}

func (_c *RequestSenderInterface_SendRequest_Call) Return(_a0 []byte, _a1 error, _a2 int) *RequestSenderInterface_SendRequest_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *RequestSenderInterface_SendRequest_Call) RunAndReturn(run func(string, string, interface{}, map[string]string, int) ([]byte, error, int)) *RequestSenderInterface_SendRequest_Call {
	_c.Call.Return(run)
	return _c
}

// NewRequestSenderInterface creates a new instance of RequestSenderInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRequestSenderInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *RequestSenderInterface {
	mock := &RequestSenderInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
