// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	structures "project/structures"

	uuid "github.com/google/uuid"
)

// ServiceList is an autogenerated mock type for the ServiceList type
type ServiceList struct {
	mock.Mock
}

type ServiceList_Expecter struct {
	mock *mock.Mock
}

func (_m *ServiceList) EXPECT() *ServiceList_Expecter {
	return &ServiceList_Expecter{mock: &_m.Mock}
}

// AddUserToList provides a mock function with given fields: ctx, listId, username
func (_m *ServiceList) AddUserToList(ctx context.Context, listId uuid.UUID, username string) error {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, listId, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ServiceList_AddUserToList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToList'
type ServiceList_AddUserToList_Call struct {
	*mock.Call
}

// AddUserToList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *ServiceList_Expecter) AddUserToList(ctx interface{}, listId interface{}, username interface{}) *ServiceList_AddUserToList_Call {
	return &ServiceList_AddUserToList_Call{Call: _e.mock.On("AddUserToList", ctx, listId, username)}
}

func (_c *ServiceList_AddUserToList_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *ServiceList_AddUserToList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ServiceList_AddUserToList_Call) Return(_a0 error) *ServiceList_AddUserToList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceList_AddUserToList_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) error) *ServiceList_AddUserToList_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIfListExistsInList provides a mock function with given fields: ctx, listId
func (_m *ServiceList) CheckIfListExistsInList(ctx context.Context, listId uuid.UUID) bool {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfListExistsInList")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, listId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServiceList_CheckIfListExistsInList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfListExistsInList'
type ServiceList_CheckIfListExistsInList_Call struct {
	*mock.Call
}

// CheckIfListExistsInList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *ServiceList_Expecter) CheckIfListExistsInList(ctx interface{}, listId interface{}) *ServiceList_CheckIfListExistsInList_Call {
	return &ServiceList_CheckIfListExistsInList_Call{Call: _e.mock.On("CheckIfListExistsInList", ctx, listId)}
}

func (_c *ServiceList_CheckIfListExistsInList_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *ServiceList_CheckIfListExistsInList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ServiceList_CheckIfListExistsInList_Call) Return(_a0 bool) *ServiceList_CheckIfListExistsInList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceList_CheckIfListExistsInList_Call) RunAndReturn(run func(context.Context, uuid.UUID) bool) *ServiceList_CheckIfListExistsInList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainUserInList provides a mock function with given fields: ctx, listId, username
func (_m *ServiceList) ContainUserInList(ctx context.Context, listId uuid.UUID, username string) bool {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for ContainUserInList")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, listId, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// ServiceList_ContainUserInList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainUserInList'
type ServiceList_ContainUserInList_Call struct {
	*mock.Call
}

// ContainUserInList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *ServiceList_Expecter) ContainUserInList(ctx interface{}, listId interface{}, username interface{}) *ServiceList_ContainUserInList_Call {
	return &ServiceList_ContainUserInList_Call{Call: _e.mock.On("ContainUserInList", ctx, listId, username)}
}

func (_c *ServiceList_ContainUserInList_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *ServiceList_ContainUserInList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ServiceList_ContainUserInList_Call) Return(_a0 bool) *ServiceList_ContainUserInList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceList_ContainUserInList_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) bool) *ServiceList_ContainUserInList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, listName, username
func (_m *ServiceList) CreateList(ctx context.Context, listName string, username string) (*structures.ListOutput, error) {
	ret := _m.Called(ctx, listName, username)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 *structures.ListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*structures.ListOutput, error)); ok {
		return rf(ctx, listName, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *structures.ListOutput); ok {
		r0 = rf(ctx, listName, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, listName, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type ServiceList_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - listName string
//   - username string
func (_e *ServiceList_Expecter) CreateList(ctx interface{}, listName interface{}, username interface{}) *ServiceList_CreateList_Call {
	return &ServiceList_CreateList_Call{Call: _e.mock.On("CreateList", ctx, listName, username)}
}

func (_c *ServiceList_CreateList_Call) Run(run func(ctx context.Context, listName string, username string)) *ServiceList_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ServiceList_CreateList_Call) Return(_a0 *structures.ListOutput, _a1 error) *ServiceList_CreateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceList_CreateList_Call) RunAndReturn(run func(context.Context, string, string) (*structures.ListOutput, error)) *ServiceList_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, listId
func (_m *ServiceList) DeleteList(ctx context.Context, listId uuid.UUID) (*structures.ListOutput, error) {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 *structures.ListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*structures.ListOutput, error)); ok {
		return rf(ctx, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *structures.ListOutput); ok {
		r0 = rf(ctx, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type ServiceList_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *ServiceList_Expecter) DeleteList(ctx interface{}, listId interface{}) *ServiceList_DeleteList_Call {
	return &ServiceList_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, listId)}
}

func (_c *ServiceList_DeleteList_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *ServiceList_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ServiceList_DeleteList_Call) Return(_a0 *structures.ListOutput, _a1 error) *ServiceList_DeleteList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceList_DeleteList_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*structures.ListOutput, error)) *ServiceList_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLists provides a mock function with given fields: ctx
func (_m *ServiceList) GetAllLists(ctx context.Context) []*structures.ListOutput {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLists")
	}

	var r0 []*structures.ListOutput
	if rf, ok := ret.Get(0).(func(context.Context) []*structures.ListOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*structures.ListOutput)
		}
	}

	return r0
}

// ServiceList_GetAllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLists'
type ServiceList_GetAllLists_Call struct {
	*mock.Call
}

// GetAllLists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *ServiceList_Expecter) GetAllLists(ctx interface{}) *ServiceList_GetAllLists_Call {
	return &ServiceList_GetAllLists_Call{Call: _e.mock.On("GetAllLists", ctx)}
}

func (_c *ServiceList_GetAllLists_Call) Run(run func(ctx context.Context)) *ServiceList_GetAllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *ServiceList_GetAllLists_Call) Return(_a0 []*structures.ListOutput) *ServiceList_GetAllLists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ServiceList_GetAllLists_Call) RunAndReturn(run func(context.Context) []*structures.ListOutput) *ServiceList_GetAllLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetListById provides a mock function with given fields: ctx, listId
func (_m *ServiceList) GetListById(ctx context.Context, listId uuid.UUID) (*structures.ListUserOutput, error) {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for GetListById")
	}

	var r0 *structures.ListUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*structures.ListUserOutput, error)); ok {
		return rf(ctx, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *structures.ListUserOutput); ok {
		r0 = rf(ctx, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList_GetListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListById'
type ServiceList_GetListById_Call struct {
	*mock.Call
}

// GetListById is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *ServiceList_Expecter) GetListById(ctx interface{}, listId interface{}) *ServiceList_GetListById_Call {
	return &ServiceList_GetListById_Call{Call: _e.mock.On("GetListById", ctx, listId)}
}

func (_c *ServiceList_GetListById_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *ServiceList_GetListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ServiceList_GetListById_Call) Return(_a0 *structures.ListUserOutput, _a1 error) *ServiceList_GetListById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceList_GetListById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*structures.ListUserOutput, error)) *ServiceList_GetListById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFromListById provides a mock function with given fields: ctx, listId, username
func (_m *ServiceList) GetUserFromListById(ctx context.Context, listId uuid.UUID, username string) (*structures.UserOutput, error) {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFromListById")
	}

	var r0 *structures.UserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*structures.UserOutput, error)); ok {
		return rf(ctx, listId, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *structures.UserOutput); ok {
		r0 = rf(ctx, listId, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.UserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, listId, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList_GetUserFromListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromListById'
type ServiceList_GetUserFromListById_Call struct {
	*mock.Call
}

// GetUserFromListById is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *ServiceList_Expecter) GetUserFromListById(ctx interface{}, listId interface{}, username interface{}) *ServiceList_GetUserFromListById_Call {
	return &ServiceList_GetUserFromListById_Call{Call: _e.mock.On("GetUserFromListById", ctx, listId, username)}
}

func (_c *ServiceList_GetUserFromListById_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *ServiceList_GetUserFromListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ServiceList_GetUserFromListById_Call) Return(_a0 *structures.UserOutput, _a1 error) *ServiceList_GetUserFromListById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceList_GetUserFromListById_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*structures.UserOutput, error)) *ServiceList_GetUserFromListById_Call {
	_c.Call.Return(run)
	return _c
}

// GetUsersFromListById provides a mock function with given fields: ctx, listId
func (_m *ServiceList) GetUsersFromListById(ctx context.Context, listId uuid.UUID) (*structures.ListUserOutput, error) {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersFromListById")
	}

	var r0 *structures.ListUserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*structures.ListUserOutput, error)); ok {
		return rf(ctx, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *structures.ListUserOutput); ok {
		r0 = rf(ctx, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListUserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList_GetUsersFromListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsersFromListById'
type ServiceList_GetUsersFromListById_Call struct {
	*mock.Call
}

// GetUsersFromListById is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *ServiceList_Expecter) GetUsersFromListById(ctx interface{}, listId interface{}) *ServiceList_GetUsersFromListById_Call {
	return &ServiceList_GetUsersFromListById_Call{Call: _e.mock.On("GetUsersFromListById", ctx, listId)}
}

func (_c *ServiceList_GetUsersFromListById_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *ServiceList_GetUsersFromListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ServiceList_GetUsersFromListById_Call) Return(_a0 *structures.ListUserOutput, _a1 error) *ServiceList_GetUsersFromListById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceList_GetUsersFromListById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*structures.ListUserOutput, error)) *ServiceList_GetUsersFromListById_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserFromList provides a mock function with given fields: ctx, listId, username
func (_m *ServiceList) RemoveUserFromList(ctx context.Context, listId uuid.UUID, username string) (*structures.UserOutput, error) {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserFromList")
	}

	var r0 *structures.UserOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*structures.UserOutput, error)); ok {
		return rf(ctx, listId, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *structures.UserOutput); ok {
		r0 = rf(ctx, listId, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.UserOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, listId, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList_RemoveUserFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserFromList'
type ServiceList_RemoveUserFromList_Call struct {
	*mock.Call
}

// RemoveUserFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *ServiceList_Expecter) RemoveUserFromList(ctx interface{}, listId interface{}, username interface{}) *ServiceList_RemoveUserFromList_Call {
	return &ServiceList_RemoveUserFromList_Call{Call: _e.mock.On("RemoveUserFromList", ctx, listId, username)}
}

func (_c *ServiceList_RemoveUserFromList_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *ServiceList_RemoveUserFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ServiceList_RemoveUserFromList_Call) Return(_a0 *structures.UserOutput, _a1 error) *ServiceList_RemoveUserFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceList_RemoveUserFromList_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*structures.UserOutput, error)) *ServiceList_RemoveUserFromList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateList provides a mock function with given fields: ctx, listId, newListName
func (_m *ServiceList) UpdateList(ctx context.Context, listId uuid.UUID, newListName string) (*structures.ListOutput, error) {
	ret := _m.Called(ctx, listId, newListName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateList")
	}

	var r0 *structures.ListOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*structures.ListOutput, error)); ok {
		return rf(ctx, listId, newListName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *structures.ListOutput); ok {
		r0 = rf(ctx, listId, newListName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, listId, newListName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ServiceList_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type ServiceList_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - newListName string
func (_e *ServiceList_Expecter) UpdateList(ctx interface{}, listId interface{}, newListName interface{}) *ServiceList_UpdateList_Call {
	return &ServiceList_UpdateList_Call{Call: _e.mock.On("UpdateList", ctx, listId, newListName)}
}

func (_c *ServiceList_UpdateList_Call) Run(run func(ctx context.Context, listId uuid.UUID, newListName string)) *ServiceList_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *ServiceList_UpdateList_Call) Return(_a0 *structures.ListOutput, _a1 error) *ServiceList_UpdateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ServiceList_UpdateList_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*structures.ListOutput, error)) *ServiceList_UpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// NewServiceList creates a new instance of ServiceList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewServiceList(t interface {
	mock.TestingT
	Cleanup(func())
}) *ServiceList {
	mock := &ServiceList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
