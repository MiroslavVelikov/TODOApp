// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	structures "project/structures"

	uuid "github.com/google/uuid"
)

// RepositoryList is an autogenerated mock type for the RepositoryList type
type RepositoryList struct {
	mock.Mock
}

type RepositoryList_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryList) EXPECT() *RepositoryList_Expecter {
	return &RepositoryList_Expecter{mock: &_m.Mock}
}

// AddUserToList provides a mock function with given fields: ctx, entityUser
func (_m *RepositoryList) AddUserToList(ctx context.Context, entityUser structures.ListUserEntity) error {
	ret := _m.Called(ctx, entityUser)

	if len(ret) == 0 {
		panic("no return value specified for AddUserToList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, structures.ListUserEntity) error); ok {
		r0 = rf(ctx, entityUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryList_AddUserToList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddUserToList'
type RepositoryList_AddUserToList_Call struct {
	*mock.Call
}

// AddUserToList is a helper method to define mock.On call
//   - ctx context.Context
//   - entityUser structures.ListUserEntity
func (_e *RepositoryList_Expecter) AddUserToList(ctx interface{}, entityUser interface{}) *RepositoryList_AddUserToList_Call {
	return &RepositoryList_AddUserToList_Call{Call: _e.mock.On("AddUserToList", ctx, entityUser)}
}

func (_c *RepositoryList_AddUserToList_Call) Run(run func(ctx context.Context, entityUser structures.ListUserEntity)) *RepositoryList_AddUserToList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structures.ListUserEntity))
	})
	return _c
}

func (_c *RepositoryList_AddUserToList_Call) Return(_a0 error) *RepositoryList_AddUserToList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryList_AddUserToList_Call) RunAndReturn(run func(context.Context, structures.ListUserEntity) error) *RepositoryList_AddUserToList_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIfListExists provides a mock function with given fields: ctx, listId
func (_m *RepositoryList) CheckIfListExists(ctx context.Context, listId uuid.UUID) bool {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfListExists")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) bool); ok {
		r0 = rf(ctx, listId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RepositoryList_CheckIfListExists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfListExists'
type RepositoryList_CheckIfListExists_Call struct {
	*mock.Call
}

// CheckIfListExists is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *RepositoryList_Expecter) CheckIfListExists(ctx interface{}, listId interface{}) *RepositoryList_CheckIfListExists_Call {
	return &RepositoryList_CheckIfListExists_Call{Call: _e.mock.On("CheckIfListExists", ctx, listId)}
}

func (_c *RepositoryList_CheckIfListExists_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *RepositoryList_CheckIfListExists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryList_CheckIfListExists_Call) Return(_a0 bool) *RepositoryList_CheckIfListExists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryList_CheckIfListExists_Call) RunAndReturn(run func(context.Context, uuid.UUID) bool) *RepositoryList_CheckIfListExists_Call {
	_c.Call.Return(run)
	return _c
}

// ContainsUserInList provides a mock function with given fields: ctx, listId, username
func (_m *RepositoryList) ContainsUserInList(ctx context.Context, listId uuid.UUID, username string) bool {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for ContainsUserInList")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) bool); ok {
		r0 = rf(ctx, listId, username)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RepositoryList_ContainsUserInList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainsUserInList'
type RepositoryList_ContainsUserInList_Call struct {
	*mock.Call
}

// ContainsUserInList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *RepositoryList_Expecter) ContainsUserInList(ctx interface{}, listId interface{}, username interface{}) *RepositoryList_ContainsUserInList_Call {
	return &RepositoryList_ContainsUserInList_Call{Call: _e.mock.On("ContainsUserInList", ctx, listId, username)}
}

func (_c *RepositoryList_ContainsUserInList_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *RepositoryList_ContainsUserInList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *RepositoryList_ContainsUserInList_Call) Return(_a0 bool) *RepositoryList_ContainsUserInList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryList_ContainsUserInList_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) bool) *RepositoryList_ContainsUserInList_Call {
	_c.Call.Return(run)
	return _c
}

// CreateList provides a mock function with given fields: ctx, entityList, entityUser
func (_m *RepositoryList) CreateList(ctx context.Context, entityList structures.ListEntity, entityUser structures.ListUserEntity) error {
	ret := _m.Called(ctx, entityList, entityUser)

	if len(ret) == 0 {
		panic("no return value specified for CreateList")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, structures.ListEntity, structures.ListUserEntity) error); ok {
		r0 = rf(ctx, entityList, entityUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryList_CreateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateList'
type RepositoryList_CreateList_Call struct {
	*mock.Call
}

// CreateList is a helper method to define mock.On call
//   - ctx context.Context
//   - entityList structures.ListEntity
//   - entityUser structures.ListUserEntity
func (_e *RepositoryList_Expecter) CreateList(ctx interface{}, entityList interface{}, entityUser interface{}) *RepositoryList_CreateList_Call {
	return &RepositoryList_CreateList_Call{Call: _e.mock.On("CreateList", ctx, entityList, entityUser)}
}

func (_c *RepositoryList_CreateList_Call) Run(run func(ctx context.Context, entityList structures.ListEntity, entityUser structures.ListUserEntity)) *RepositoryList_CreateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structures.ListEntity), args[2].(structures.ListUserEntity))
	})
	return _c
}

func (_c *RepositoryList_CreateList_Call) Return(_a0 error) *RepositoryList_CreateList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryList_CreateList_Call) RunAndReturn(run func(context.Context, structures.ListEntity, structures.ListUserEntity) error) *RepositoryList_CreateList_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteList provides a mock function with given fields: ctx, listId
func (_m *RepositoryList) DeleteList(ctx context.Context, listId uuid.UUID) (*structures.ListModel, error) {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteList")
	}

	var r0 *structures.ListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*structures.ListModel, error)); ok {
		return rf(ctx, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *structures.ListModel); ok {
		r0 = rf(ctx, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryList_DeleteList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteList'
type RepositoryList_DeleteList_Call struct {
	*mock.Call
}

// DeleteList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *RepositoryList_Expecter) DeleteList(ctx interface{}, listId interface{}) *RepositoryList_DeleteList_Call {
	return &RepositoryList_DeleteList_Call{Call: _e.mock.On("DeleteList", ctx, listId)}
}

func (_c *RepositoryList_DeleteList_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *RepositoryList_DeleteList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryList_DeleteList_Call) Return(_a0 *structures.ListModel, _a1 error) *RepositoryList_DeleteList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryList_DeleteList_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*structures.ListModel, error)) *RepositoryList_DeleteList_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllLists provides a mock function with given fields: ctx
func (_m *RepositoryList) GetAllLists(ctx context.Context) []*structures.ListModel {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllLists")
	}

	var r0 []*structures.ListModel
	if rf, ok := ret.Get(0).(func(context.Context) []*structures.ListModel); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*structures.ListModel)
		}
	}

	return r0
}

// RepositoryList_GetAllLists_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllLists'
type RepositoryList_GetAllLists_Call struct {
	*mock.Call
}

// GetAllLists is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RepositoryList_Expecter) GetAllLists(ctx interface{}) *RepositoryList_GetAllLists_Call {
	return &RepositoryList_GetAllLists_Call{Call: _e.mock.On("GetAllLists", ctx)}
}

func (_c *RepositoryList_GetAllLists_Call) Run(run func(ctx context.Context)) *RepositoryList_GetAllLists_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RepositoryList_GetAllLists_Call) Return(_a0 []*structures.ListModel) *RepositoryList_GetAllLists_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryList_GetAllLists_Call) RunAndReturn(run func(context.Context) []*structures.ListModel) *RepositoryList_GetAllLists_Call {
	_c.Call.Return(run)
	return _c
}

// GetListById provides a mock function with given fields: ctx, listId
func (_m *RepositoryList) GetListById(ctx context.Context, listId uuid.UUID) (*structures.ListModel, error) {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for GetListById")
	}

	var r0 *structures.ListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*structures.ListModel, error)); ok {
		return rf(ctx, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *structures.ListModel); ok {
		r0 = rf(ctx, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryList_GetListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListById'
type RepositoryList_GetListById_Call struct {
	*mock.Call
}

// GetListById is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *RepositoryList_Expecter) GetListById(ctx interface{}, listId interface{}) *RepositoryList_GetListById_Call {
	return &RepositoryList_GetListById_Call{Call: _e.mock.On("GetListById", ctx, listId)}
}

func (_c *RepositoryList_GetListById_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *RepositoryList_GetListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryList_GetListById_Call) Return(_a0 *structures.ListModel, _a1 error) *RepositoryList_GetListById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryList_GetListById_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*structures.ListModel, error)) *RepositoryList_GetListById_Call {
	_c.Call.Return(run)
	return _c
}

// GetListOwner provides a mock function with given fields: ctx, listId
func (_m *RepositoryList) GetListOwner(ctx context.Context, listId uuid.UUID) (*structures.UserModel, error) {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for GetListOwner")
	}

	var r0 *structures.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*structures.UserModel, error)); ok {
		return rf(ctx, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *structures.UserModel); ok {
		r0 = rf(ctx, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryList_GetListOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetListOwner'
type RepositoryList_GetListOwner_Call struct {
	*mock.Call
}

// GetListOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *RepositoryList_Expecter) GetListOwner(ctx interface{}, listId interface{}) *RepositoryList_GetListOwner_Call {
	return &RepositoryList_GetListOwner_Call{Call: _e.mock.On("GetListOwner", ctx, listId)}
}

func (_c *RepositoryList_GetListOwner_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *RepositoryList_GetListOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryList_GetListOwner_Call) Return(_a0 *structures.UserModel, _a1 error) *RepositoryList_GetListOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryList_GetListOwner_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*structures.UserModel, error)) *RepositoryList_GetListOwner_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserFromListById provides a mock function with given fields: ctx, listId, username
func (_m *RepositoryList) GetUserFromListById(ctx context.Context, listId uuid.UUID, username string) (*structures.UserModel, error) {
	ret := _m.Called(ctx, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserFromListById")
	}

	var r0 *structures.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*structures.UserModel, error)); ok {
		return rf(ctx, listId, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *structures.UserModel); ok {
		r0 = rf(ctx, listId, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, listId, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryList_GetUserFromListById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserFromListById'
type RepositoryList_GetUserFromListById_Call struct {
	*mock.Call
}

// GetUserFromListById is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - username string
func (_e *RepositoryList_Expecter) GetUserFromListById(ctx interface{}, listId interface{}, username interface{}) *RepositoryList_GetUserFromListById_Call {
	return &RepositoryList_GetUserFromListById_Call{Call: _e.mock.On("GetUserFromListById", ctx, listId, username)}
}

func (_c *RepositoryList_GetUserFromListById_Call) Run(run func(ctx context.Context, listId uuid.UUID, username string)) *RepositoryList_GetUserFromListById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *RepositoryList_GetUserFromListById_Call) Return(_a0 *structures.UserModel, _a1 error) *RepositoryList_GetUserFromListById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryList_GetUserFromListById_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*structures.UserModel, error)) *RepositoryList_GetUserFromListById_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveUserUserFromList provides a mock function with given fields: ctx, entityUser
func (_m *RepositoryList) RemoveUserUserFromList(ctx context.Context, entityUser structures.ListUserEntity) (*structures.UserModel, error) {
	ret := _m.Called(ctx, entityUser)

	if len(ret) == 0 {
		panic("no return value specified for RemoveUserUserFromList")
	}

	var r0 *structures.UserModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, structures.ListUserEntity) (*structures.UserModel, error)); ok {
		return rf(ctx, entityUser)
	}
	if rf, ok := ret.Get(0).(func(context.Context, structures.ListUserEntity) *structures.UserModel); ok {
		r0 = rf(ctx, entityUser)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.UserModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, structures.ListUserEntity) error); ok {
		r1 = rf(ctx, entityUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryList_RemoveUserUserFromList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveUserUserFromList'
type RepositoryList_RemoveUserUserFromList_Call struct {
	*mock.Call
}

// RemoveUserUserFromList is a helper method to define mock.On call
//   - ctx context.Context
//   - entityUser structures.ListUserEntity
func (_e *RepositoryList_Expecter) RemoveUserUserFromList(ctx interface{}, entityUser interface{}) *RepositoryList_RemoveUserUserFromList_Call {
	return &RepositoryList_RemoveUserUserFromList_Call{Call: _e.mock.On("RemoveUserUserFromList", ctx, entityUser)}
}

func (_c *RepositoryList_RemoveUserUserFromList_Call) Run(run func(ctx context.Context, entityUser structures.ListUserEntity)) *RepositoryList_RemoveUserUserFromList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structures.ListUserEntity))
	})
	return _c
}

func (_c *RepositoryList_RemoveUserUserFromList_Call) Return(_a0 *structures.UserModel, _a1 error) *RepositoryList_RemoveUserUserFromList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryList_RemoveUserUserFromList_Call) RunAndReturn(run func(context.Context, structures.ListUserEntity) (*structures.UserModel, error)) *RepositoryList_RemoveUserUserFromList_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateList provides a mock function with given fields: ctx, listId, newListName
func (_m *RepositoryList) UpdateList(ctx context.Context, listId uuid.UUID, newListName string) (*structures.ListModel, error) {
	ret := _m.Called(ctx, listId, newListName)

	if len(ret) == 0 {
		panic("no return value specified for UpdateList")
	}

	var r0 *structures.ListModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (*structures.ListModel, error)); ok {
		return rf(ctx, listId, newListName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) *structures.ListModel); ok {
		r0 = rf(ctx, listId, newListName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.ListModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, listId, newListName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryList_UpdateList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateList'
type RepositoryList_UpdateList_Call struct {
	*mock.Call
}

// UpdateList is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - newListName string
func (_e *RepositoryList_Expecter) UpdateList(ctx interface{}, listId interface{}, newListName interface{}) *RepositoryList_UpdateList_Call {
	return &RepositoryList_UpdateList_Call{Call: _e.mock.On("UpdateList", ctx, listId, newListName)}
}

func (_c *RepositoryList_UpdateList_Call) Run(run func(ctx context.Context, listId uuid.UUID, newListName string)) *RepositoryList_UpdateList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string))
	})
	return _c
}

func (_c *RepositoryList_UpdateList_Call) Return(_a0 *structures.ListModel, _a1 error) *RepositoryList_UpdateList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryList_UpdateList_Call) RunAndReturn(run func(context.Context, uuid.UUID, string) (*structures.ListModel, error)) *RepositoryList_UpdateList_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryList creates a new instance of RepositoryList. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryList(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryList {
	mock := &RepositoryList{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
