// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"
	structures "project/structures"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// RepositoryTodo is an autogenerated mock type for the RepositoryTodo type
type RepositoryTodo struct {
	mock.Mock
}

type RepositoryTodo_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryTodo) EXPECT() *RepositoryTodo_Expecter {
	return &RepositoryTodo_Expecter{mock: &_m.Mock}
}

// AssignTodoToUser provides a mock function with given fields: ctx, todoId, listId, username
func (_m *RepositoryTodo) AssignTodoToUser(ctx context.Context, todoId uuid.UUID, listId uuid.UUID, username string) error {
	ret := _m.Called(ctx, todoId, listId, username)

	if len(ret) == 0 {
		panic("no return value specified for AssignTodoToUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, string) error); ok {
		r0 = rf(ctx, todoId, listId, username)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryTodo_AssignTodoToUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AssignTodoToUser'
type RepositoryTodo_AssignTodoToUser_Call struct {
	*mock.Call
}

// AssignTodoToUser is a helper method to define mock.On call
//   - ctx context.Context
//   - todoId uuid.UUID
//   - listId uuid.UUID
//   - username string
func (_e *RepositoryTodo_Expecter) AssignTodoToUser(ctx interface{}, todoId interface{}, listId interface{}, username interface{}) *RepositoryTodo_AssignTodoToUser_Call {
	return &RepositoryTodo_AssignTodoToUser_Call{Call: _e.mock.On("AssignTodoToUser", ctx, todoId, listId, username)}
}

func (_c *RepositoryTodo_AssignTodoToUser_Call) Run(run func(ctx context.Context, todoId uuid.UUID, listId uuid.UUID, username string)) *RepositoryTodo_AssignTodoToUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(string))
	})
	return _c
}

func (_c *RepositoryTodo_AssignTodoToUser_Call) Return(_a0 error) *RepositoryTodo_AssignTodoToUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryTodo_AssignTodoToUser_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID, string) error) *RepositoryTodo_AssignTodoToUser_Call {
	_c.Call.Return(run)
	return _c
}

// ChangeTodoStatus provides a mock function with given fields: ctx, todoId, listId
func (_m *RepositoryTodo) ChangeTodoStatus(ctx context.Context, todoId uuid.UUID, listId uuid.UUID) error {
	ret := _m.Called(ctx, todoId, listId)

	if len(ret) == 0 {
		panic("no return value specified for ChangeTodoStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, todoId, listId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryTodo_ChangeTodoStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeTodoStatus'
type RepositoryTodo_ChangeTodoStatus_Call struct {
	*mock.Call
}

// ChangeTodoStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - todoId uuid.UUID
//   - listId uuid.UUID
func (_e *RepositoryTodo_Expecter) ChangeTodoStatus(ctx interface{}, todoId interface{}, listId interface{}) *RepositoryTodo_ChangeTodoStatus_Call {
	return &RepositoryTodo_ChangeTodoStatus_Call{Call: _e.mock.On("ChangeTodoStatus", ctx, todoId, listId)}
}

func (_c *RepositoryTodo_ChangeTodoStatus_Call) Run(run func(ctx context.Context, todoId uuid.UUID, listId uuid.UUID)) *RepositoryTodo_ChangeTodoStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryTodo_ChangeTodoStatus_Call) Return(_a0 error) *RepositoryTodo_ChangeTodoStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryTodo_ChangeTodoStatus_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) error) *RepositoryTodo_ChangeTodoStatus_Call {
	_c.Call.Return(run)
	return _c
}

// CheckIfListContainsTodo provides a mock function with given fields: ctx, listId, todoId
func (_m *RepositoryTodo) CheckIfListContainsTodo(ctx context.Context, listId uuid.UUID, todoId uuid.UUID) bool {
	ret := _m.Called(ctx, listId, todoId)

	if len(ret) == 0 {
		panic("no return value specified for CheckIfListContainsTodo")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, listId, todoId)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RepositoryTodo_CheckIfListContainsTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckIfListContainsTodo'
type RepositoryTodo_CheckIfListContainsTodo_Call struct {
	*mock.Call
}

// CheckIfListContainsTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
//   - todoId uuid.UUID
func (_e *RepositoryTodo_Expecter) CheckIfListContainsTodo(ctx interface{}, listId interface{}, todoId interface{}) *RepositoryTodo_CheckIfListContainsTodo_Call {
	return &RepositoryTodo_CheckIfListContainsTodo_Call{Call: _e.mock.On("CheckIfListContainsTodo", ctx, listId, todoId)}
}

func (_c *RepositoryTodo_CheckIfListContainsTodo_Call) Run(run func(ctx context.Context, listId uuid.UUID, todoId uuid.UUID)) *RepositoryTodo_CheckIfListContainsTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryTodo_CheckIfListContainsTodo_Call) Return(_a0 bool) *RepositoryTodo_CheckIfListContainsTodo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryTodo_CheckIfListContainsTodo_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) bool) *RepositoryTodo_CheckIfListContainsTodo_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTodo provides a mock function with given fields: ctx, newTask
func (_m *RepositoryTodo) CreateTodo(ctx context.Context, newTask structures.TodoEntity) error {
	ret := _m.Called(ctx, newTask)

	if len(ret) == 0 {
		panic("no return value specified for CreateTodo")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, structures.TodoEntity) error); ok {
		r0 = rf(ctx, newTask)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RepositoryTodo_CreateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTodo'
type RepositoryTodo_CreateTodo_Call struct {
	*mock.Call
}

// CreateTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - newTask structures.TodoEntity
func (_e *RepositoryTodo_Expecter) CreateTodo(ctx interface{}, newTask interface{}) *RepositoryTodo_CreateTodo_Call {
	return &RepositoryTodo_CreateTodo_Call{Call: _e.mock.On("CreateTodo", ctx, newTask)}
}

func (_c *RepositoryTodo_CreateTodo_Call) Run(run func(ctx context.Context, newTask structures.TodoEntity)) *RepositoryTodo_CreateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structures.TodoEntity))
	})
	return _c
}

func (_c *RepositoryTodo_CreateTodo_Call) Return(_a0 error) *RepositoryTodo_CreateTodo_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryTodo_CreateTodo_Call) RunAndReturn(run func(context.Context, structures.TodoEntity) error) *RepositoryTodo_CreateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteTodo provides a mock function with given fields: ctx, todoId, listId
func (_m *RepositoryTodo) DeleteTodo(ctx context.Context, todoId uuid.UUID, listId uuid.UUID) (*structures.TodoModel, error) {
	ret := _m.Called(ctx, todoId, listId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTodo")
	}

	var r0 *structures.TodoModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*structures.TodoModel, error)); ok {
		return rf(ctx, todoId, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *structures.TodoModel); ok {
		r0 = rf(ctx, todoId, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.TodoModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, todoId, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryTodo_DeleteTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteTodo'
type RepositoryTodo_DeleteTodo_Call struct {
	*mock.Call
}

// DeleteTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - todoId uuid.UUID
//   - listId uuid.UUID
func (_e *RepositoryTodo_Expecter) DeleteTodo(ctx interface{}, todoId interface{}, listId interface{}) *RepositoryTodo_DeleteTodo_Call {
	return &RepositoryTodo_DeleteTodo_Call{Call: _e.mock.On("DeleteTodo", ctx, todoId, listId)}
}

func (_c *RepositoryTodo_DeleteTodo_Call) Run(run func(ctx context.Context, todoId uuid.UUID, listId uuid.UUID)) *RepositoryTodo_DeleteTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryTodo_DeleteTodo_Call) Return(_a0 *structures.TodoModel, _a1 error) *RepositoryTodo_DeleteTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryTodo_DeleteTodo_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*structures.TodoModel, error)) *RepositoryTodo_DeleteTodo_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllTasks provides a mock function with given fields: ctx, listId
func (_m *RepositoryTodo) GetAllTasks(ctx context.Context, listId uuid.UUID) []structures.TodoModel {
	ret := _m.Called(ctx, listId)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []structures.TodoModel
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []structures.TodoModel); ok {
		r0 = rf(ctx, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]structures.TodoModel)
		}
	}

	return r0
}

// RepositoryTodo_GetAllTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllTasks'
type RepositoryTodo_GetAllTasks_Call struct {
	*mock.Call
}

// GetAllTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - listId uuid.UUID
func (_e *RepositoryTodo_Expecter) GetAllTasks(ctx interface{}, listId interface{}) *RepositoryTodo_GetAllTasks_Call {
	return &RepositoryTodo_GetAllTasks_Call{Call: _e.mock.On("GetAllTasks", ctx, listId)}
}

func (_c *RepositoryTodo_GetAllTasks_Call) Run(run func(ctx context.Context, listId uuid.UUID)) *RepositoryTodo_GetAllTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryTodo_GetAllTasks_Call) Return(_a0 []structures.TodoModel) *RepositoryTodo_GetAllTasks_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryTodo_GetAllTasks_Call) RunAndReturn(run func(context.Context, uuid.UUID) []structures.TodoModel) *RepositoryTodo_GetAllTasks_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodo provides a mock function with given fields: ctx, todoId, listId
func (_m *RepositoryTodo) GetTodo(ctx context.Context, todoId uuid.UUID, listId uuid.UUID) (*structures.TodoModel, error) {
	ret := _m.Called(ctx, todoId, listId)

	if len(ret) == 0 {
		panic("no return value specified for GetTodo")
	}

	var r0 *structures.TodoModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (*structures.TodoModel, error)); ok {
		return rf(ctx, todoId, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) *structures.TodoModel); ok {
		r0 = rf(ctx, todoId, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.TodoModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, todoId, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryTodo_GetTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodo'
type RepositoryTodo_GetTodo_Call struct {
	*mock.Call
}

// GetTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - todoId uuid.UUID
//   - listId uuid.UUID
func (_e *RepositoryTodo_Expecter) GetTodo(ctx interface{}, todoId interface{}, listId interface{}) *RepositoryTodo_GetTodo_Call {
	return &RepositoryTodo_GetTodo_Call{Call: _e.mock.On("GetTodo", ctx, todoId, listId)}
}

func (_c *RepositoryTodo_GetTodo_Call) Run(run func(ctx context.Context, todoId uuid.UUID, listId uuid.UUID)) *RepositoryTodo_GetTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryTodo_GetTodo_Call) Return(_a0 *structures.TodoModel, _a1 error) *RepositoryTodo_GetTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryTodo_GetTodo_Call) RunAndReturn(run func(context.Context, uuid.UUID, uuid.UUID) (*structures.TodoModel, error)) *RepositoryTodo_GetTodo_Call {
	_c.Call.Return(run)
	return _c
}

// GetTodoAssignee provides a mock function with given fields: ctx, todoId
func (_m *RepositoryTodo) GetTodoAssignee(ctx context.Context, todoId uuid.UUID) string {
	ret := _m.Called(ctx, todoId)

	if len(ret) == 0 {
		panic("no return value specified for GetTodoAssignee")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) string); ok {
		r0 = rf(ctx, todoId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RepositoryTodo_GetTodoAssignee_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTodoAssignee'
type RepositoryTodo_GetTodoAssignee_Call struct {
	*mock.Call
}

// GetTodoAssignee is a helper method to define mock.On call
//   - ctx context.Context
//   - todoId uuid.UUID
func (_e *RepositoryTodo_Expecter) GetTodoAssignee(ctx interface{}, todoId interface{}) *RepositoryTodo_GetTodoAssignee_Call {
	return &RepositoryTodo_GetTodoAssignee_Call{Call: _e.mock.On("GetTodoAssignee", ctx, todoId)}
}

func (_c *RepositoryTodo_GetTodoAssignee_Call) Run(run func(ctx context.Context, todoId uuid.UUID)) *RepositoryTodo_GetTodoAssignee_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryTodo_GetTodoAssignee_Call) Return(_a0 string) *RepositoryTodo_GetTodoAssignee_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryTodo_GetTodoAssignee_Call) RunAndReturn(run func(context.Context, uuid.UUID) string) *RepositoryTodo_GetTodoAssignee_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTodo provides a mock function with given fields: ctx, updatedTask, listId
func (_m *RepositoryTodo) UpdateTodo(ctx context.Context, updatedTask structures.TodoEntity, listId uuid.UUID) (*structures.TodoModel, error) {
	ret := _m.Called(ctx, updatedTask, listId)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTodo")
	}

	var r0 *structures.TodoModel
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, structures.TodoEntity, uuid.UUID) (*structures.TodoModel, error)); ok {
		return rf(ctx, updatedTask, listId)
	}
	if rf, ok := ret.Get(0).(func(context.Context, structures.TodoEntity, uuid.UUID) *structures.TodoModel); ok {
		r0 = rf(ctx, updatedTask, listId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*structures.TodoModel)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, structures.TodoEntity, uuid.UUID) error); ok {
		r1 = rf(ctx, updatedTask, listId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RepositoryTodo_UpdateTodo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTodo'
type RepositoryTodo_UpdateTodo_Call struct {
	*mock.Call
}

// UpdateTodo is a helper method to define mock.On call
//   - ctx context.Context
//   - updatedTask structures.TodoEntity
//   - listId uuid.UUID
func (_e *RepositoryTodo_Expecter) UpdateTodo(ctx interface{}, updatedTask interface{}, listId interface{}) *RepositoryTodo_UpdateTodo_Call {
	return &RepositoryTodo_UpdateTodo_Call{Call: _e.mock.On("UpdateTodo", ctx, updatedTask, listId)}
}

func (_c *RepositoryTodo_UpdateTodo_Call) Run(run func(ctx context.Context, updatedTask structures.TodoEntity, listId uuid.UUID)) *RepositoryTodo_UpdateTodo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(structures.TodoEntity), args[2].(uuid.UUID))
	})
	return _c
}

func (_c *RepositoryTodo_UpdateTodo_Call) Return(_a0 *structures.TodoModel, _a1 error) *RepositoryTodo_UpdateTodo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RepositoryTodo_UpdateTodo_Call) RunAndReturn(run func(context.Context, structures.TodoEntity, uuid.UUID) (*structures.TodoModel, error)) *RepositoryTodo_UpdateTodo_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryTodo creates a new instance of RepositoryTodo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryTodo(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryTodo {
	mock := &RepositoryTodo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
